{"version":3,"sources":["reducers/toll.js","constants/action-types.js","reducers/index.js","middleware/fetchInfo.js","store.js","middleware/log.js","actions/toll.js","components/current-time.js","components/schedule-item.js","components/today-schedule.js","components/app.js","serviceWorker.js","index.js"],"names":["initialState","todayInfo","todaySchedule","state","toll","currentTimeInfo","createSelector","info","schedule","i","hour","Object","objectSpread","dayName","holidayName","tollReducer","arguments","length","undefined","action","type","payload","rootReducer","combineReducers","fromTollReducer","inits","method","headers","Content-Type","middleware","_ref","getState","dispatch","next","console","log","fetch","concat","process","then","res","json","data","catch","err","enhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","apply","store","createStore","CurrentTime","props","_props$currentTimeInf","goodToGo","payByMail","react_default","a","createElement","className","ScheduleItem","_props$todaySchedule","TodaySchedule","keys","map","item","schedule_item","key","mapDispatchToProps","fetchTollInfo","connect","useEffect","current_time","today_schedule","Boolean","location","hostname","match","ReactDOM","render","es","app","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.baca5836.chunk.js","sourcesContent":["import { createSelector } from 'reselect'\nimport { SET_TOLL_INFO } from '../constants/action-types'\n\nconst initialState = {\n  todayInfo:{},\n  todaySchedule:{},\n}\n\nconst tollReducer = (toll = initialState, action) => {\n  switch (action.type) {\n    case SET_TOLL_INFO:\n      return action.payload\n    default:\n      return toll\n  }\n}\n\nexport const todayInfo = state => state.toll.todayInfo\nexport const todaySchedule = state => state.toll.todaySchedule\n\nexport const currentTimeInfo = createSelector(\n  todayInfo,\n  todaySchedule,\n  (info, schedule) => {\n    for(let i = info.hour; i >= 0; i--){\n      if(schedule[i]){\n        return{\n          dayName: info.dayName,\n          holidayName: info.holidayName,\n          ...schedule[i],\n        }\n      }\n    }\n  }\n)\n\nexport default tollReducer","export const FETCH_TOLL_INFO = 'FETCH_TOLL_INFO'\nexport const SET_TOLL_INFO = 'SET_TOLL_INFO'","import { combineReducers } from 'redux'\n\nimport tollReducer, * as fromTollReducer from './toll'\n\nconst rootReducer = combineReducers({\n  toll: tollReducer,\n})\n\nexport const todayInfo = state => fromTollReducer.todayInfo(state)\nexport const todaySchedule = state => fromTollReducer.todaySchedule(state)\nexport const currentTimeInfo = state => fromTollReducer.currentTimeInfo(state)\n\nexport default rootReducer","import { FETCH_TOLL_INFO } from '../constants/action-types'\nimport { setTollInfo } from '../actions/toll'\nconst apiURL = process.env.REACT_APP_API_URL\n\nconst inits = {\n  method: 'GET',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n}\n\nconst fetchInfo = ({ dispatch }) => next => action => {\n\n  if(action.type !== FETCH_TOLL_INFO)\n    return next(action)\n\n  fetch(`${apiURL}/api/toll`, inits)\n    .then(res => {\n      return res.json()\n    })\n    .then(data => {\n      dispatch(setTollInfo(data))\n    })\n    .catch(err=>console.log('ERROR:',err))\n}\n\n\nexport default fetchInfo","import { createStore, applyMiddleware, compose } from 'redux'\nimport rootReducer from './reducers'\n\nimport log from './middleware/log'\nimport fetchInfo from './middleware/fetchInfo'\n\nconst middleware = [\n  log,\n  fetchInfo,\n]\n\nconst composeEnhancers =\n  typeof window === 'object' &&\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n    }) : compose\n\nconst enhancer = composeEnhancers(\n  applyMiddleware(...middleware),\n)\n\nconst store = createStore(rootReducer, enhancer)\nwindow.store = store\n\nexport default store","const logMiddleware = ({ getState , dispatch }) => (next) => (action) => {\n  console.log('ACTION->', action)\n  next(action)\n}\n\nexport default logMiddleware","import { SET_TOLL_INFO, FETCH_TOLL_INFO } from '../constants/action-types'\n\nexport const setTollInfo = (payload) => ({\n  type: SET_TOLL_INFO, payload,\n})\n\nexport const fetchTollInfo = () => ({\n  type: FETCH_TOLL_INFO,\n})","import React from 'react'\n\nconst CurrentTime = props => {\n\n  const {\n    dayName, goodToGo, holidayName,\n    payByMail, schedule,\n  } = props.currentTimeInfo\n\n  return (\n    <div className='current-time'>\n      <h2>{dayName}</h2>\n      <h3>{holidayName}</h3>\n      <p>{schedule}</p>\n      <p>Good To Go: <b>{goodToGo}</b></p>\n      <p>Pay By Mail: <b>{payByMail}</b></p>\n    </div>\n  )\n}\n\nexport default CurrentTime","import React from 'react'\n\nconst ScheduleItem = props => {\n  const { schedule, goodToGo, payByMail }= props.todaySchedule\n\n  return (\n    <li>\n      <p>{`Schedule: ${schedule}`}</p>\n      <p>Good-To-Go: <b>{goodToGo}</b> || Pay By Mail <b>{payByMail}</b></p>\n      <p>-------------</p>\n    </li>\n  )\n}\n\nexport default ScheduleItem\n","import React from 'react'\nimport ScheduleItem from './schedule-item'\n\n\nconst TodaySchedule = ({ todaySchedule }) => {\n\n\n\n  return (\n    <ul>\n      {Object.keys(todaySchedule).map((item, i) =>\n        <ScheduleItem  key={i} todaySchedule={todaySchedule[item]} />\n      )}\n    </ul>\n\n  )\n}\n\nexport default TodaySchedule\n","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { fetchTollInfo } from '../actions/toll'\nimport { todaySchedule, currentTimeInfo } from '../reducers'\n\nimport CurrentTime from './current-time'\nimport TodaySchedule from './today-schedule'\n\nconst App = ({ fetchTollInfo, todaySchedule, currentTimeInfo }) => {\n\n  useEffect(()=> {\n    fetchTollInfo()\n  }, [])\n\n  return (\n    <div className=\"app\">\n      <h1>520 Toll Bridge</h1>\n      { currentTimeInfo && <CurrentTime currentTimeInfo={currentTimeInfo}  />}\n      <TodaySchedule todaySchedule={todaySchedule}  />\n      <p>{`API--> ${process.env.REACT_APP_API_URL}`}</p>\n    </div>\n  )\n}\n\nconst mapStateToProps = state => ({\n  todaySchedule: todaySchedule(state),\n  currentTimeInfo: currentTimeInfo(state),\n})\n\nconst mapDispatchToProps = {\n  fetchTollInfo,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nimport App from './components/app'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(  \n<Provider store={store}>\n  <App />\n</Provider>, \ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}